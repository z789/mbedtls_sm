/* BEGIN_HEADER */
#include "mbedtls/sm4.h"

/* Maximum size of data used by test vectors
 * WARNING: to be adapted if and when adding larger test cases */
#define SM4_MAX_DATASIZE  160

/* Maximum sizes of hexified things */
#define SM4_KEY_STR        (2 * MBEDTLS_SM4_KEYSIZE + 1)
#define SM4_BLOCK_STR      (2 * MBEDTLS_SM4_BLOCKSIZE + 1)
#define SM4_MAX_DATA_STR   (2 * SM4_MAX_DATASIZE + 1)
/* END_HEADER */

/* BEGIN_DEPENDENCIES
 * depends_on:MBEDTLS_SM4_C
 * END_DEPENDENCIES
 */

/* BEGIN_CASE depends_on:NOT_DEFINED */
void sm4_invalid_param()
{
    mbedtls_sm4_context ctx;
    unsigned char input[MBEDTLS_SM4_BLOCKSIZE] = { 0 };
    unsigned char output[MBEDTLS_SM4_BLOCKSIZE] = { 0 };
    unsigned char iv[MBEDTLS_SM4_BLOCKSIZE] = { 0 };
    size_t iv_off = 0;

    ((void) iv_off);
    ((void) iv);
    ((void) ctx);
    ((void) input);
    ((void) output);

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    TEST_EQUAL(MBEDTLS_ERR_SM4_BAD_INPUT_DATA,
               mbedtls_sm4_crypt_cbc(&ctx,
                                      42 /* invalid mode */,
                                      sizeof(input),
                                      iv,
                                      input,
                                      output));
#endif /* MBEDTLS_CIPHER_MODE_CBC */

#if defined(MBEDTLS_CIPHER_MODE_CFB)
    TEST_EQUAL(MBEDTLS_ERR_SM4_BAD_INPUT_DATA,
               mbedtls_sm4_crypt_cfb128(&ctx,
                                         42,            /* invalid mode */
                                         sizeof(input),
                                         &iv_off,
                                         iv,
                                         input,
                                         output));
#endif /* MBEDTLS_CIPHER_MODE_CFB */

exit:
    return;

}
/* END_CASE */

/* BEGIN_CASE */
void sm4_encrypt_ecb(data_t *key_str, data_t *src_str,
                      data_t *expected_output, int setkey_result)
{
    unsigned char output[SM4_MAX_DATASIZE];
    mbedtls_sm4_context ctx;
    size_t i;

    memset(output, 0x00, sizeof(output));
    mbedtls_sm4_init(&ctx);

    TEST_ASSERT(mbedtls_sm4_setkey_enc(&ctx, key_str->x, key_str->len * 8)
                == setkey_result);
    if (setkey_result == 0) {
        for (i = 0; i < src_str->len; i += MBEDTLS_SM4_BLOCKSIZE) {
            TEST_ASSERT(mbedtls_sm4_crypt_ecb(&ctx,MBEDTLS_SM4_ENCRYPT, src_str->x + i,
                                               output + i) == 0);
        }

        ASSERT_COMPARE(output, expected_output->len,
                       expected_output->x, expected_output->len);
    }

exit:
    mbedtls_sm4_free(&ctx);
}
/* END_CASE */

/* BEGIN_CASE */
void sm4_decrypt_ecb(data_t *key_str, data_t *src_str,
                      data_t *expected_output, int setkey_result)
{
    unsigned char output[SM4_MAX_DATASIZE];
    mbedtls_sm4_context ctx;
    size_t i;

    memset(output, 0x00, sizeof(output));
    mbedtls_sm4_init(&ctx);

    TEST_ASSERT(mbedtls_sm4_setkey_dec(&ctx, key_str->x, key_str->len * 8)
                == setkey_result);
    if (setkey_result == 0) {
        for (i = 0; i < src_str->len; i += MBEDTLS_SM4_BLOCKSIZE) {
            TEST_ASSERT(mbedtls_sm4_crypt_ecb(&ctx, MBEDTLS_SM4_DECRYPT, src_str->x + i,
                                               output + i) == 0);
        }

        ASSERT_COMPARE(output, expected_output->len,
                       expected_output->x, expected_output->len);
    }

exit:
    mbedtls_sm4_free(&ctx);
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CIPHER_MODE_CBC */
void sm4_encrypt_cbc(data_t *key_str, data_t *iv_str,
                      data_t *src_str, data_t *expected_output,
                      int cbc_result)
{
    unsigned char output[SM4_MAX_DATASIZE];
    mbedtls_sm4_context ctx;

    memset(output, 0x00, sizeof(output));
    mbedtls_sm4_init(&ctx);

    mbedtls_sm4_setkey_enc(&ctx, key_str->x, key_str->len * 8);
    TEST_ASSERT(mbedtls_sm4_crypt_cbc(&ctx, MBEDTLS_SM4_ENCRYPT,
                                       src_str->len, iv_str->x, src_str->x,
                                       output) == cbc_result);
    if (cbc_result == 0) {
        ASSERT_COMPARE(output, expected_output->len,
                       expected_output->x, expected_output->len);
    }

exit:
    mbedtls_sm4_free(&ctx);
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CIPHER_MODE_CBC */
void sm4_decrypt_cbc(data_t *key_str, data_t *iv_str,
                      data_t *src_str, data_t *expected_output,
                      int cbc_result)
{
    unsigned char output[SM4_MAX_DATASIZE];
    mbedtls_sm4_context ctx;

    memset(output, 0x00, sizeof(output));
    mbedtls_sm4_init(&ctx);

    mbedtls_sm4_setkey_dec(&ctx, key_str->x, key_str->len * 8);
    TEST_ASSERT(mbedtls_sm4_crypt_cbc(&ctx, MBEDTLS_SM4_DECRYPT,
                                       src_str->len, iv_str->x, src_str->x,
                                       output) == cbc_result);
    if (cbc_result == 0) {
        ASSERT_COMPARE(output, expected_output->len,
                       expected_output->x, expected_output->len);
    }

exit:
    mbedtls_sm4_free(&ctx);
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CIPHER_MODE_CFB */
void sm4_encrypt_cfb128(data_t *key_str, data_t *iv_str,
                         data_t *src_str, data_t *expected_output,
                         int result)
{
    unsigned char output[SM4_MAX_DATASIZE];
    mbedtls_sm4_context ctx;
    size_t iv_offset = 0;

    memset(output, 0x00, sizeof(output));
    mbedtls_sm4_init(&ctx);

    mbedtls_sm4_setkey_enc(&ctx, key_str->x, key_str->len * 8);
    TEST_ASSERT(mbedtls_sm4_crypt_cfb128(&ctx, MBEDTLS_SM4_ENCRYPT,
                                          src_str->len, &iv_offset,
                                          iv_str->x, src_str->x, output)
                == result);

    ASSERT_COMPARE(output, expected_output->len,
                   expected_output->x, expected_output->len);

exit:
    mbedtls_sm4_free(&ctx);
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CIPHER_MODE_CFB */
void sm4_decrypt_cfb128(data_t *key_str, data_t *iv_str,
                         data_t *src_str, data_t *expected_output,
                         int result)
{
    unsigned char output[SM4_MAX_DATASIZE];
    mbedtls_sm4_context ctx;
    size_t iv_offset = 0;

    memset(output, 0x00, sizeof(output));
    mbedtls_sm4_init(&ctx);

    mbedtls_sm4_setkey_dec(&ctx, key_str->x, key_str->len * 8);
    TEST_ASSERT(mbedtls_sm4_crypt_cfb128(&ctx, MBEDTLS_SM4_DECRYPT,
                                          src_str->len, &iv_offset,
                                          iv_str->x, src_str->x, output)
                == result);

    ASSERT_COMPARE(output, expected_output->len,
                   expected_output->x, expected_output->len);

exit:
    mbedtls_sm4_free(&ctx);
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CIPHER_MODE_CTR */
void sm4_encrypt_ctr(data_t *key_str, data_t *iv_str,
                      data_t *src_str, data_t *expected_output,
                      int result)
{
    unsigned char output[SM4_MAX_DATASIZE];
    unsigned char blk[MBEDTLS_SM4_BLOCKSIZE];
    mbedtls_sm4_context ctx;
    size_t iv_offset = 0;

    memset(output, 0x00, sizeof(output));
    mbedtls_sm4_init(&ctx);

    mbedtls_sm4_setkey_enc(&ctx, key_str->x, key_str->len * 8);
    TEST_ASSERT(mbedtls_sm4_crypt_ctr(&ctx, src_str->len, &iv_offset,
                                       iv_str->x, blk, src_str->x, output)
                == result);

    ASSERT_COMPARE(output, expected_output->len,
                   expected_output->x, expected_output->len);

exit:
    mbedtls_sm4_free(&ctx);
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CIPHER_MODE_CTR */
void sm4_decrypt_ctr(data_t *key_str, data_t *iv_str,
                      data_t *src_str, data_t *expected_output,
                      int result)
{
    unsigned char output[SM4_MAX_DATASIZE];
    unsigned char blk[MBEDTLS_SM4_BLOCKSIZE];
    mbedtls_sm4_context ctx;
    size_t iv_offset = 0;

    memset(output, 0x00, sizeof(output));
    mbedtls_sm4_init(&ctx);

    mbedtls_sm4_setkey_enc(&ctx, key_str->x, key_str->len * 8);
    TEST_ASSERT(mbedtls_sm4_crypt_ctr(&ctx, src_str->len, &iv_offset,
                                       iv_str->x, blk, src_str->x, output)
                == result);

    ASSERT_COMPARE(output, expected_output->len,
                   expected_output->x, expected_output->len);

exit:
    mbedtls_sm4_free(&ctx);
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_SELF_TEST */
void sm4_selftest()
{
    TEST_ASSERT(mbedtls_sm4_self_test(1) == 0);
}
/* END_CASE */
